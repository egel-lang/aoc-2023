# Advent of Code (AoC) - day 1, task 2

import "prelude.eg"
import "os.ego"

using System
using OS
using List
using String

def input =
    let L = read_line stdin in if eof stdin then {} else {L | input}

def to_digit =
    [ '0' -> 0 | '1' -> 1 | '2' -> 2 | '3' -> 3 | '4' -> 4 
    | '5' -> 5 | '6' -> 6 | '7' -> 7 | '8' -> 8 | '9' -> 9
    | _ -> none ]

val table =
    {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"} 
    |> map unpack |> [ XX -> zip XX (from_to 0 9 |> map [N -> chr (48 + N)]) ]

def prefix = [ XX YY -> XX == take (length XX) YY ]

def subs =
    [ SUBS {} -> {} | {} {C|CC} -> {C|subs table CC}
    | {(S, D)|SUBS} {C|CC} -> if prefix S {C|CC} then {D,C|subs table CC} else subs SUBS {C|CC} ]

def main =
    input |> map (do unpack |> subs table |> map to_digit |> filter ((/=) none)) 
          |> map [ XX -> (10 * (head XX)) + (last XX) ] |> sum
