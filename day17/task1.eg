# Advent of Code (AoC) - day 3, task 1

import "prelude.eg"
import "os.ego"
import "generator.eg"
import "dictionary.eg"
import "pqueue.ego"

using System
using OS
using List

def input = let L = read_line stdin in if eof stdin then {} else {L | input}

def to_board =
   do Gen::from_lists |> Gen::zip_2d Gen::space |> Gen::to_lists |> flatten |> Dict::from_list

def print_board =
    [ B -> let KK = Dict::keys B in
        foldl [(X0,Y0) (X1,Y1) -> (if not (X0 == X1) then print "\n" else none);
               print (Dict::get B (X1, Y1)); (X1,Y1) ] (head KK) KK; none ]

def parse = do map unpack |> map (map to_int) |> to_board

def mul = [N (X,Y) -> (N*X,N*Y)]

def add = [(X0,Y0) (X1,Y1) -> (X0+X1,Y0+Y1)]

val dirs = {(0,1),(0,-1),(1,0),(-1,0)}

def starts = [D -> let S = (0,0) in let W = Dict::get D S in {((S,false),W),((S,true),W)} ]

def end = do Dict::keys |> maximum 

def ends = [D -> let E = end D in {(E,false),(E,true)}]

val dirs3 = from_to 1 3 |> concat_map [N -> map [P -> zip_with mul (from_to 0 N) (repeat (N+1) P)] dirs]

def paths = [D P -> map (map (add P)) dirs3 |> filter (all (Dict::has D))]

def path_to_edge = 
    [D PP -> let P0 = head PP in let P1 = last PP in let B = fst P0 == fst P1 in
        ((P0,B), foldl [N P -> N + Dict::get D P] 0 (tail PP), (P1, not B)) ]

def to_edges = [D -> Dict::keys D |> concat_map (paths D) |> map (path_to_edge D)]

def to_graph = 
    foldl [G (P,E,Q) -> if Dict::has G P then Dict::set G P {(E,Q)|Dict::get G P} else Dict::set G P {(E,Q)} ] Dict::dict

def shortest_run = 
    [ G V Q D -> 
        if pqueue_empty Q then D else 
        let (N, P0) = pqueue_top Q in pqueue_pop Q;
        if Dict::has V P0 then shortest_run G V Q D else
        print (N,P0) "\n";
        let V = Dict::set V P0 1 in
        let ADJ = Dict::get G P0 |> filter [(_,P1) -> not (Dict::has V P1)] in
        let D = foldl [D (W,P1) -> Dict::set D P1 (if Dict::has D P1 then min (N+W) (Dict::get D P1) else N+W)] D ADJ in
        let Q = foldl [Q (_,P1) -> pqueue_push Q (Dict::get D P1) P1] Q ADJ in
            shortest_run G V Q D ]

def shortest = 
    [G S -> shortest_run G Dict::dict (foldl [Q (P,W) -> pqueue_push Q W P] pqueue S) (foldl [D (P,W) -> Dict::set D P 0] Dict::dict S)]

def main =
    input |> parse |> [D -> to_edges D |> to_graph |> [G -> shortest G (starts D)] |> [S -> print (Dict::to_list S) "\n"; map (Dict::get S) (ends D)] |> minimum ]
