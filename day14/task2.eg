#Advent of Code (AoC) - day 14, task 2

import "prelude.eg"
import "os.ego"
import "dictionary.eg"

using System
using OS
using List

def input = let L = read_line stdin in if eof stdin then {} else {L | input}

def slide0 =
    [ XX YY {}  -> XX ++ YY
    | XX YY {'#'|ZZ} -> XX ++ YY ++ {'#'| slide0 {} {} ZZ}
    | XX YY {'O'|ZZ} -> slide0 {'O'|XX} YY ZZ
    | XX YY {'.'|ZZ} -> slide0 XX {'.'|YY} ZZ ]

#def slide = do transpose |> map (slide0 {} {}) |> transpose
#def turn = do transpose |> map reverse
#def cycle = iter 4 (do slide |> turn) 

def cycle = iter 4 (do transpose |> map (slide0 {} {}) |> map reverse)

def count =
    do transpose |> concat_map [ XX -> zip (from_to 1 (length XX)) (reverse XX) ]
    |> filter (do snd |> ((==) 'O')) |> map fst |> sum

def iter_fast = 
    [D I N F X -> 
        if I == N then X
        else if Dict::has D X then let J = Dict::get D X in
            Dict::get (Dict::inverse D) (J+((N-J)%(I-J))) |> head
        else Dict::set D X I; iter_fast D (I+1) N F (F X)]

def main =
    input |> map unpack |> iter_fast Dict::dict 0 1000000000 cycle |> count

