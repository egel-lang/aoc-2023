# Advent of Code (AoC) - day 7, task 1

import "prelude.eg"
import "os.ego"
import "generator.eg"
import "dictionary.eg"
import "regex.ego"

using System
using OS
using List

def input = let L = read_line stdin in if eof stdin then {} else {L | input}

def card_to_ord = [C -> index_of C (unpack "23456789TJQKA") ]

def collate =
    [ {} -> {}
    | {XX} -> {XX}
    | {XX, YY| ZZ} ->
        if head XX == head YY then collate {XX++YY|ZZ} else
        {XX | collate {YY|ZZ}} ]

def to_type =
    do sort |> map [X -> {X}] |> collate |> map length |> sort |>
       [{5} -> 6 |{1,4} -> 5 |{2,3} -> 4 |{1,1,3} -> 3|{1,2,2} -> 2 |{1,1,1,2} -> 1 |_ -> 0]

def main =
    input |> map (do unpack |> split_on ' ' |> [{HH,NN} -> (map card_to_ord HH, to_int (pack NN))])
          |> map [(CC,N) -> (to_type CC, CC, N)] |> sort
          |> map [(_,_,N) -> N] |> [NN -> zip NN (from_to 1 (length NN))]
          |> map (uncurry (*)) |> sum
